group 'com.jpcsp'
version '0.7'

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.stehno:gradle-natives:0.3.0"
    }
}

apply plugin: "com.stehno.natives"

apply plugin: 'java'
apply plugin: 'application'

mainClassName = "jpcsp.MainGUI"

sourceSets {
    main.java.srcDirs = ['src']
    test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources', 'src']
    //jniLibs.srcDir = 'lib'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile files(
            'lib/asm-all-4.0_RC1.jar',
            'lib/xuggle-xuggler-noarch-5.4.jar',
    )

    //compile "org.ow2.asm:asm-all:4.0" // DO NOT SEEMS TO WORK! Does it includes a modified 4.0-RC1 version or something?
    //compile "org.ow2.asm:asm-all:5.1" // DO NOT SEEMS TO WORK! Does it includes a modified 4.0-RC1 version or something?

    compile "commons-cli:commons-cli:20040117.000000"

    compile "ch.qos.logback:logback-core:1.0.0" // Last version: 1.1.7
    compile "ch.qos.logback:logback-classic:1.0.0"

    compile "com.jidesoft:jide-oss:2.8.4"

    compile "jdom:jdom:1.1"

    compile "log4j:log4j:1.2.17"
    compile "org.slf4j:slf4j-api:1.6.4"

    compile "org.bouncycastle:bcprov-jdk16:1.46"
    compile "org.lwjgl.lwjgl:lwjgl:${lwjglVersion}"

    //compile "jaxen:jaxen:1.1.6" // not used?
    //compile "javassist:javasist:3.11.0.GA" // not used?
}

/*
def platforms = ['windows', 'linux', 'osx']
platforms.each { platform ->
    task "${platform}Natives" {
        def outputDir = "$buildDir/natives/$platform"
        inputs.files(configurations.compile)
        outputs.dir(outputDir)
        doLast {
            copy {
                def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
                        .findAll { it.classifier == "natives-$platform" }
                artifacts.each {
                    from zipTree(it.file)
                }
                into outputDir
            }
        }
    }
}
task natives {
    description "Copies native libraries to an appropriate directory."
    dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
}

run {
    jvmArgs = ['-Djava.library.path=../natives/windows']
}
*/