/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
package jpcsp.Allegrex.compiler.nativeCode;

/**
 * This time critical code sequence is executed very often in the game "Digivice Ver. Portable - NPJH00126".
 * The code generated by the compiler is not optimal as obviously, only the float values of the VFPU registers
 * are used, excepted for the last few instructions. The compiler however keeps updating both the float and int values
 * of the VFPU registers.
 *
 * This analysis has been extracted from the profiler output reported on the forum, see:
 *     http://www.emunewz.net/forum/showthread.php?tid=149780&pid=312569#pid312569
 *
 * @author gid15
 *
 */
public class NPJH00126 extends AbstractNativeCodeSequence {
	static public void call() {
		final float[] vprFloat = getCpu().vprFloat;
		final int[] vprInt = getCpu().vprInt;

		// VHTFM4.q   C000.q, E100.q, C010.q
		vprFloat[0] = vprFloat[16] * vprFloat[4] + vprFloat[20] * vprFloat[5] + vprFloat[24] * vprFloat[6] + vprFloat[28];
		vprFloat[1] = vprFloat[17] * vprFloat[4] + vprFloat[21] * vprFloat[5] + vprFloat[25] * vprFloat[6] + vprFloat[29];
		vprFloat[2] = vprFloat[18] * vprFloat[4] + vprFloat[22] * vprFloat[5] + vprFloat[26] * vprFloat[6] + vprFloat[30];
		vprFloat[3] = vprFloat[19] * vprFloat[4] + vprFloat[23] * vprFloat[5] + vprFloat[27] * vprFloat[6] + vprFloat[31];

		// vmul.q     C010.q, C030.q, C000.q
		vprFloat[4] = vprFloat[12] * vprFloat[0];
		vprFloat[5] = vprFloat[13] * vprFloat[1];
		vprFloat[6] = vprFloat[14] * vprFloat[2];
		vprFloat[7] = vprFloat[15] * vprFloat[3];

		// VPFXT      [w, w, w, w]
		// vsge.q     C300.q, C000.q, C000.q
		vprFloat[48] = vprFloat[0] >= vprFloat[3] ? 1f : 0f;
		vprFloat[49] = vprFloat[1] >= vprFloat[3] ? 1f : 0f;
		vprFloat[50] = vprFloat[2] >= vprFloat[3] ? 1f : 0f;
		vprFloat[51] = vprFloat[3] >= vprFloat[3] ? 1f : 0f;

		// VPFXT      [-w, -w, -w, -w]
		// vslt.q     C310.q, C000.q, C000.q
		vprFloat[52] = vprFloat[0] < -vprFloat[3] ? 1f : 0f;
		vprFloat[53] = vprFloat[1] < -vprFloat[3] ? 1f : 0f;
		vprFloat[54] = vprFloat[2] < -vprFloat[3] ? 1f : 0f;
		vprFloat[55] = vprFloat[3] < -vprFloat[3] ? 1f : 0f;

		// VPFXT      [w, w, w, w]
		// vsge.q     C320.q, C010.q, C010.q
		vprFloat[56] = vprFloat[4] >= vprFloat[7] ? 1f : 0f;
		vprFloat[57] = vprFloat[5] >= vprFloat[7] ? 1f : 0f;
		vprFloat[58] = vprFloat[6] >= vprFloat[7] ? 1f : 0f;
		vprFloat[59] = vprFloat[7] >= vprFloat[7] ? 1f : 0f;

		// VPFXT      [-w, -w, -w, -w]
		// vslt.q     C330.q, C010.q, C010.q
		vprFloat[60] = vprFloat[4] < -vprFloat[7] ? 1f : 0f;
		vprFloat[61] = vprFloat[5] < -vprFloat[7] ? 1f : 0f;
		vprFloat[62] = vprFloat[6] < -vprFloat[7] ? 1f : 0f;
		vprFloat[63] = vprFloat[7] < -vprFloat[7] ? 1f : 0f;

		// vmin.t     C200.t, C300.t, C400.t
		vprFloat[32] = Math.min(vprFloat[48], vprFloat[64]);
		vprFloat[33] = Math.min(vprFloat[49], vprFloat[65]);
		vprFloat[34] = Math.min(vprFloat[50], vprFloat[66]);

		// vmin.t     C210.t, C310.t, C410.t
		vprFloat[36] = Math.min(vprFloat[52], vprFloat[68]);
		vprFloat[37] = Math.min(vprFloat[53], vprFloat[69]);
		vprFloat[38] = Math.min(vprFloat[54], vprFloat[70]);

		// vmax.t     C220.t, C320.t, C420.t
		vprFloat[40] = Math.max(vprFloat[56], vprFloat[72]);
		vprFloat[41] = Math.max(vprFloat[57], vprFloat[73]);
		vprFloat[42] = Math.max(vprFloat[58], vprFloat[74]);

		// vmax.t     C230.t, C330.t, C430.t
		vprFloat[44] = Math.max(vprFloat[60], vprFloat[76]);
		vprFloat[45] = Math.max(vprFloat[61], vprFloat[77]);
		vprFloat[46] = Math.max(vprFloat[62], vprFloat[78]);

		// vmin.t     C200.t, C200.t, C500.t
		vprFloat[32] = Math.min(vprFloat[32], vprFloat[80]);
		vprFloat[33] = Math.min(vprFloat[33], vprFloat[81]);
		vprFloat[34] = Math.min(vprFloat[34], vprFloat[82]);

		// vmin.t     C210.t, C210.t, C510.t
		vprFloat[36] = Math.min(vprFloat[36], vprFloat[84]);
		vprFloat[37] = Math.min(vprFloat[37], vprFloat[85]);
		vprFloat[38] = Math.min(vprFloat[38], vprFloat[86]);

		// vmax.t     C220.t, C220.t, C520.t
		vprFloat[40] = Math.max(vprFloat[40], vprFloat[88]);
		vprFloat[41] = Math.max(vprFloat[41], vprFloat[89]);
		vprFloat[42] = Math.max(vprFloat[42], vprFloat[90]);

		// vmax.t     C230.t, C230.t, C530.t
		vprFloat[44] = Math.max(vprFloat[44], vprFloat[92]);
		vprFloat[45] = Math.max(vprFloat[45], vprFloat[93]);
		vprFloat[46] = Math.max(vprFloat[46], vprFloat[94]);

		// vmax.q     R200.q, R200.q, R201.q
		vprFloat[32] = Math.max(vprFloat[32], vprFloat[33]);
		vprFloat[36] = Math.max(vprFloat[36], vprFloat[37]);
		vprFloat[40] = Math.max(vprFloat[40], vprFloat[41]);
		vprFloat[44] = Math.max(vprFloat[44], vprFloat[45]);

		// vmax.q     R200.q, R200.q, R202.q
		vprFloat[32] = Math.max(vprFloat[32], vprFloat[34]);
		vprFloat[36] = Math.max(vprFloat[36], vprFloat[38]);
		vprFloat[40] = Math.max(vprFloat[40], vprFloat[42]);
		vprFloat[44] = Math.max(vprFloat[44], vprFloat[46]);
		vprInt[32] = Float.floatToRawIntBits(vprFloat[32]);
		vprInt[36] = Float.floatToRawIntBits(vprFloat[36]);
		vprInt[40] = Float.floatToRawIntBits(vprFloat[40]);
		vprInt[44] = Float.floatToRawIntBits(vprFloat[44]);

		// VMMOV.q    M500.q, M400.q
		System.arraycopy(vprFloat, 64, vprFloat, 80, 16);

		// VMMOV.q    M400.q, M300.q
		System.arraycopy(vprFloat, 48, vprFloat, 64, 16);

		// vi2uc.q    S200.s, R200.q
		int tmp = vprInt[32] < 0 ? 0 : vprInt[32] >> 23;
		if (vprInt[36] > 0) tmp |= (vprInt[36] >> 23) << 8;
		if (vprInt[40] > 0) tmp |= (vprInt[40] >> 23) << 16;
		if (vprInt[44] > 0) tmp |= (vprInt[44] >> 23) << 24;
		vprInt[32] = tmp;

		// mfv.s      $t0, S200.s
		getCpu()._t0 = vprInt[32];
	}
}
